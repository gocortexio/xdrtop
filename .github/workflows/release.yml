name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: xdrtop-linux-x86_64
            package_type: deb
          - os: macos-latest
            target: x86_64-apple-darwin
            name: xdrtop-macos-x86_64
            package_type: tar
          - os: macos-latest
            target: aarch64-apple-darwin
            name: xdrtop-macos-aarch64
            package_type: tar
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: xdrtop-windows-x86_64
            package_type: zip

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cargo-deb (Linux only)
      if: matrix.package_type == 'deb'
      run: cargo install cargo-deb

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-release-

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/xdrtop

    - name: Create release directory
      run: mkdir -p release

    - name: Create Debian package
      if: matrix.package_type == 'deb'
      run: |
        cargo deb --target ${{ matrix.target }} --no-build
        cp target/${{ matrix.target }}/debian/*.deb release/${{ matrix.name }}.deb

    - name: Create tarball (macOS)
      if: matrix.package_type == 'tar'
      run: |
        cp target/${{ matrix.target }}/release/xdrtop release/${{ matrix.name }}
        cd release
        tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}
        rm ${{ matrix.name }}

    - name: Create Windows ZIP archive
      if: matrix.package_type == 'zip'
      run: |
        cp target/${{ matrix.target }}/release/xdrtop.exe release/${{ matrix.name }}.exe
        cd release
        7z a ${{ matrix.name }}.zip ${{ matrix.name }}.exe
        rm ${{ matrix.name }}.exe

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: release/

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        mkdir -p release-files
        find artifacts -name "*.tar.gz" -exec cp {} release-files/ \;
        find artifacts -name "*.deb" -exec cp {} release-files/ \;
        find artifacts -name "*.zip" -exec cp {} release-files/ \;
        ls -la release-files/

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## XDRTop ${{ github.ref_name }} Release
          
          High-performance Rust CLI monitoring tool for Cortex XDR with real-time case tracking.
          
          ### Downloads
          - **Linux (Debian/Ubuntu)**: Download the `.deb` package
          - **macOS (Intel)**: Download `xdrtop-macos-x86_64.tar.gz`
          - **macOS (Apple Silicon)**: Download `xdrtop-macos-aarch64.tar.gz`
          - **Windows**: Download `xdrtop-windows-x86_64.zip`
          
          ### Installation
          
          #### Debian/Ubuntu
          ```bash
          sudo dpkg -i xdrtop-linux-x86_64.deb
          ```
          
          #### macOS
          ```bash
          tar -xzf xdrtop-macos-*.tar.gz
          sudo mv xdrtop-macos-* /usr/local/bin/xdrtop
          ```
          
          #### Windows
          ```powershell
          # Extract ZIP and add to PATH
          Expand-Archive xdrtop-windows-x86_64.zip -DestinationPath C:\Tools\xdrtop
          # Add C:\Tools\xdrtop to your PATH environment variable
          ```
          
          ### Configuration
          Create your configuration file at `~/.xdrtop/config.json`:
          ```json
          {
            "api_key_id": "your-api-key-id",
            "api_key_secret": "your-api-key-secret",
            "tenant_url": "https://api-your-tenant.xdr.au.paloaltonetworks.com"
          }
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}